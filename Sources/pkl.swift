import ArgumentParser
import Files
import ShellOut

struct Pkl: ParsableCommand {
    func run() throws {
        do {
            let workflowsDir = "../.github/workflows"
            var files = [String]()
            for file in try Folder(path: workflowsDir).files.recursive {
                guard file.extension == "pkl" else {
                    print("Skipping \(file.name)")
                    continue
                }
                print("Adding \(file.name)")
                files.append(file.name)
            }

            try shellOut(
                to: "pkl eval",
                arguments: [
                    "--format=yaml",
                    "--output-path=%{moduleDir}/%{moduleName}.yaml",
                    files.joined(separator: " "),
                ],
                at: workflowsDir
            )

            // Annotate yaml files with autogenerated warning
            for file in try Folder(path: workflowsDir).files.recursive {
                guard file.extension == "yaml" else {
                    continue
                }
                var contents =
                    #"""
                    # !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !
                    #                            _
                    #                           (_)
                    #  __      ____ _ _ __ _ __  _ _ __   __ _
                    #  \ \ /\ / / _` | '__| '_ \| | '_ \ / _` |
                    #   \ V  V / (_| | |  | | | | | | | | (_| |
                    #    \_/\_/ \__,_|_|  |_| |_|_|_| |_|\__, |
                    #                                     __/ |
                    #                                    |___/
                    #
                    #      AUTOGENERATED FILE. DO NOT EDIT.
                    #
                    # See `\#(file.nameExcludingExtension).pkl` for source.
                    # Generate with `buildtools pkl`.
                    #
                    # !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !
                    """#
                // Ensure newline!
                contents.append("\n")
                try contents.append(file.readAsString())
                try file.write(contents)
            }

            print("Done! \(files.count) \(files.count == 1 ? "file" : "files") converted.")
        } catch let error as ShellOutError {
            print(error.message)
            print(error.output)
        } catch {
            print(error)
        }
    }
}
